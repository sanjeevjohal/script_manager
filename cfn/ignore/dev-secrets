#!/bin/bash

SECRETS_NAME=airflow_secrets
SECRETS_BASE=$(basename $PWD)
SECRETS_DIR=${PWD}/secrets
KMS_KEYID="arn:aws:kms:us-west-2:578517639677:key/1c172b09-e7ba-48e3-8cb8-e911074b25dc"
S3_REPO=s3://pde-asset-nonprod/resources/${SECRETS_BASE}

echo "########## SECRETS_DIR=${SECRETS_DIR}"
echo "########## S3 REPO=${S3_REPO}"
echo "########## SECRET NAME=${SECRETS_NAME}"
action=$1

do_push() {
    echo "########## extract and push secrets to S3"
    [ -d "${SECRETS_DIR}" ] || mkdir -p "${SECRETS_DIR}"
    # TODO - perhaps instead of using the Host's Python virtual env to run Airflow CLI, use the
    # container and then copy the file out from container before uploading.
    local s=${SECRETS_DIR}/${SECRETS_NAME}
    pipenv run airflow connections export --file-format yaml ${s}
    gzip ${s}
    aws kms encrypt --key-id "${KMS_KEYID}" --plaintext fileb://${s}.gz \
      --output text --query CiphertextBlob | base64 --decode > ${s}.gz.enc
    if [ -e "${s}.gz.enc" ]; then
        aws s3 cp "${s}.gz.enc" "${S3_REPO}/${SECRETS_NAME}.gz.enc"
    else
        echo "Something wrong, the Airflow secrets [${s}.gz.enc] not found"
    fi
}

do_pull() {
    echo "########## download and install secrets from S3"
    [ -d "${SECRETS_DIR}" ] || mkdir -p "${SECRETS_DIR}"
    local s=${SECRETS_DIR}/${SECRETS_NAME}
    aws --profile sie-cloud-laco-platsvcs-nonprod-zz-sjohal s3 cp "${S3_REPO}/${SECRETS_NAME}.gz.enc" "${s}.gz.enc"
    if [ -e "${s}.gz.enc" ] ; then
        aws --profile sie-cloud-laco-platsvcs-nonprod-zz-sjohal kms decrypt --ciphertext-blob "fileb://${s}.gz.enc" \
          --output text --query Plaintext | base64 --decode > "${s}.yaml.gz"
        gzip -d "${s}.yaml.gz"
    fi
    if [ -e "${SECRETS_DIR}/${SECRETS_NAME}.yaml" ]; then
        airflow connections import "${SECRETS_DIR}/${SECRETS_NAME}.yaml"
    fi
}

# sanity check
#docker_container_cnt=$(docker ps | grep aws-mwaa-local-runner | grep postgres | wc -l)
docker_container_cnt=$(docker ps | grep postgres | wc -l)
if [ "$docker_container_cnt" -lt 1 ]; then
    echo it appears the MWAA local runner Postgres DB is not running, aborting...
#elif [ -n "${SECRETS_DIR}" -a -d "${SECRETS_DIR}" ]; then
elif [ -n "${SECRETS_DIR}" ]; then
    case "$action" in
      push)
        do_push
        ;;
      pull)
        do_pull
        ;;
      *)
        echo unknown action - $action
        ;;
    esac
else
    echo SECRETS_DIR environment variable not defined, aborting...
    echo please source ./scripts/env-setup from the project root directory
fi